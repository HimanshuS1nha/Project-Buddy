// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  Live
  Building
}

enum TaskStatus {
  Pending
  Review
  Completed
}

model Users {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String

  tasks        Tasks[]
  Projects     Projects[]
  JoinRequests JoinRequests[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projects {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      ProjectStatus
  teamMembers String[]

  createdBy String
  user      Users  @relation(references: [email], fields: [createdBy], onDelete: Cascade)

  tasks        Tasks[]
  JoinRequests JoinRequests[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tasks {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate String
  endDate   String
  status    TaskStatus

  projectId  String   @db.ObjectId
  Projects   Projects @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedTo String[]
  users      Users    @relation(fields: [assignedTo], references: [email])

  comments Comments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  sentBy  String
  sentTo  String

  tasksId String? @db.ObjectId
  Tasks   Tasks?  @relation(fields: [tasksId], references: [id])

  createdAt DateTime @default(now())
}

model JoinRequests {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String @db.ObjectId
  userEmail   String
  senderEmail String

  user    Users    @relation(fields: [userEmail], references: [email])
  project Projects @relation(fields: [projectId], references: [id])
}
